classDiagram
    IDominoTile <|-- DominoTile
    IPlayer <|-- Player
    IDeck <|-- Deck
    IBoard <|-- Board
    IGame <|-- Game

    Player "1" --o "0..*" DominoTile
    Deck "1" --* "0..*" DominoTile
    Board "1" --o "0..*" DominoTile
    Game "1" --o "2..4*" Player
    Game "1" --* "1" Board
    Game "1" --* "1" Deck
    Game ..> Side

    class IDominoTile {
        <<Interface>>
        +byte PipLeft
        +byte PipRight
        +bool IsDouble
    }
    class DominoTile {
        +byte PipLeft
        +byte PipRight
        +bool IsDouble
        +DominoTile(byte PipLeft, byte PipRight)
    }

    class IPlayer {
        <<Interface>>
        +string Name
        +int Score
        +List~IDominoTile~ Hand
        +PlayDominoTile(IDominoTile dominoTile) : bool
    }

    class Player {
        +string Name
        +int Score
        +List~IDominoTile~ Hand
        +Player(string name)
        +PlayDominoTile(IDominoTile dominoTile) : bool
    }

    class IDeck {
        <<Interface>>
        +List~IDominoTile~ DominoTiles
    }
    class Deck {
        +List~IDominoTile~ DominoTiles
    }

    class IBoard {
        <<Interface>>
        +List~IDominoTile~ DominoTiles
    }
    class Board {
        +List~IDominoTile~ DominoTiles
    }

    class IGame {
        <<Interface>>
        +SetupDeck() : void
        +StartGame() : void
        +Shuffle() : void
        +DisplayBoard(): void
        +FirstTurn() : void
        +PlayDominoTile(IPlayer player, IDominoTile DominoTile, Side side) : bool
        +NextTurn() : void
        +IsRoundOver() : bool
        +NextRound() : void
        +IsRoundDraw() : bool
        +GameOver() : IPlayer
        -IsDominoTailValid(IDominoTile DominoTile, int[] openEnds) : bool
        -CheckDominoTailCanPlay(IPlayer player, int[] openEnds) : bool
        -GetOpenEnds() : int[]
        -CalculateScore() : void
        -AddPointToPlayer(IPlayer player) : void
        +HandleGameOver(object sender, EventArgs e) : void
        +HandleGameStart(object sender, EventArgs e) : void
    }
    
    class Game {
        -List~IPlayer~ _players
        -IDeck _deck
        -IBoard _board
        -int _currentTurn
        +event EventHandler GameEvents;
        +Game(List~IPlayer~ players, IDeck deck, IBoard board)
        +SetupDeck() : void
        +StartGame() : void
        +Shuffle() : void
        +DisplayBoard(): void
        +FirstTurn() : void
        +PlayDominoTile(IPlayer player, IDominoTile DominoTile, Side side) : bool
        +NextTurn() : void
        +IsRoundOver() : bool
        +NextRound() : void
        +IsRoundDraw() : bool
        +GameOver() : IPlayer
        -IsDominoTailValid(IDominoTile DominoTile, int[] openEnds) : bool
        -CheckDominoTailCanPlay(IPlayer player, int[] openEnds) : bool
        -GetOpenEnds() : int[]
        -CalculateScore() : void
        -AddPointToPlayer(IPlayer player) : void
        +HandleGameOver(object sender, EventArgs e) : void
        +HandleGameStart(object sender, EventArgs e) : void
    }

    class Side {
        <<Enum>>
        LEFT
        RIGHT
    }